/**
 * @copyright 2020 YelloSoft
*/

#include "swiper/swiper.hpp"

#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <random>
#include <sstream>

static const uint8_t xlats[16][11] = {
    {
        0x64, 0x73, 0x66, 0x64,
        0x3b, 0x6b, 0x66, 0x6f,
        0x41, 0x2c, 0x2e
    },
    {
        0x73, 0x66, 0x64, 0x3b,
        0x6b, 0x66, 0x6f, 0x41,
        0x2c, 0x2e, 0x69
    },
    {
        0x66, 0x64, 0x3b, 0x6b,
        0x66, 0x6f, 0x41, 0x2c,
        0x2e, 0x69, 0x79
    },
    {
        0x64, 0x3b, 0x6b, 0x66,
        0x6f, 0x41, 0x2c, 0x2e,
        0x69, 0x79, 0x65
    },
    {
        0x3b, 0x6b, 0x66, 0x6f,
        0x41, 0x2c, 0x2e, 0x69,
        0x79, 0x65, 0x77
    },
    {
        0x6b, 0x66, 0x6f, 0x41,
        0x2c, 0x2e, 0x69, 0x79,
        0x65, 0x77, 0x72
    },
    {
        0x66, 0x6f, 0x41, 0x2c,
        0x2e, 0x69, 0x79, 0x65,
        0x77, 0x72, 0x6b
    },
    {
        0x6f, 0x41, 0x2c, 0x2e,
        0x69, 0x79, 0x65, 0x77,
        0x72, 0x6b, 0x6c
    },
    {
        0x41, 0x2c, 0x2e, 0x69,
        0x79, 0x65, 0x77, 0x72,
        0x6b, 0x6c, 0x64
    },
    {
        0x2c, 0x2e, 0x69, 0x79,
        0x65, 0x77, 0x72, 0x6b,
        0x6c, 0x64, 0x4a
    },
    {
        0x2e, 0x69, 0x79, 0x65,
        0x77, 0x72, 0x6b, 0x6c,
        0x64, 0x4a, 0x4b
    },
    {
        0x69, 0x79, 0x65, 0x77,
        0x72, 0x6b, 0x6c, 0x64,
        0x4a, 0x4b, 0x44
    },
    {
        0x79, 0x65, 0x77, 0x72,
        0x6b, 0x6c, 0x64, 0x4a,
        0x4b, 0x44, 0x48
    },
    {
        0x65, 0x77, 0x72, 0x6b,
        0x6c, 0x64, 0x4a, 0x4b,
        0x44, 0x48, 0x53
    },
    {
        0x77, 0x72, 0x6b, 0x6c,
        0x64, 0x4a, 0x4b, 0x44,
        0x48, 0x53, 0x55
    },
    {
        0x72, 0x6b, 0x6c, 0x64,
        0x4a, 0x4b, 0x44, 0x48,
        0x53, 0x55, 0x42
    }
};

void swiper::Encrypt(char *hash, unsigned int prng_seed, const char *password) {
    std::uniform_int_distribution distribution(0, 15);
    std::default_random_engine rng(prng_seed);
    const auto seed = int(distribution(rng));
    const auto xlat = xlats[seed];

    auto hash_buf = std::stringstream();
    hash_buf.setf(std::ios::dec, std::ios::basefield);
    hash_buf.width(2);
    hash_buf.fill('0');
    hash_buf << seed;

    hash_buf.setf(std::ios::hex, std::ios::basefield);

    auto len = strlen(password);

    if (len > 11) {
        len = 11;
    }

    for (auto i = 0u; i < len; i++) {
        auto c = xlat[i] ^ uint8_t(password[i]);
        hash_buf << std::setw(2) << std::setfill('0') << c;
    }

    auto hash_s = hash_buf.str();
    hash_s.copy(hash, hash_s.length(), 0);
    hash[hash_s.length()] = '\0';
}

static inline uint8_t parse_digit(char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }

    return c - 'a' + 10;
}

static uint8_t parse_int(const char *pair) {
    return parse_digit(pair[0]) * 10 + parse_digit(pair[1]);
}

static inline uint8_t parse_hex(const char *pair) {
    return parse_digit(pair[0]) * 16 + parse_digit(pair[1]);
}

void swiper::Decrypt(char *password, const char *hash) {
    const auto xlat = xlats[parse_int(hash)];
    const auto len = int(strlen(hash)/2 - 1);

    #pragma unroll 8
    for (auto i = len - 1; i >= 0; i--) {
        password[i] = xlat[i] ^ parse_hex(hash + 2 * (i + 1));
    }

    password[len] = '\0';
}
